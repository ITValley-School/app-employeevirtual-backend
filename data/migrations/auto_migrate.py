"""
Sistema de auto-migra√ß√£o autom√°tica do banco de dados
"""
import logging
from sqlalchemy import inspect, text
from sqlalchemy.exc import SQLAlchemyError
from data.database import engine
from data.base import Base, get_all_metadata

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class AutoMigrator:
    """
    Classe para gerenciar migra√ß√µes autom√°ticas do banco
    """
    
    def __init__(self):
        self.engine = engine
        self.inspector = inspect(engine)
        self.metadata = get_all_metadata()
    
    def test_connection(self):
        """
        Testa conex√£o com o banco
        """
        try:
            with self.engine.connect() as conn:
                # Para Azure SQL Server
                result = conn.execute(text("SELECT @@VERSION as version"))
                version = result.fetchone()
                logger.info(f"‚úÖ Conectado ao Azure SQL Server: {version[0]}")
                return True
        except Exception as e:
            logger.error(f"‚ùå Erro de conex√£o: {e}")
            return False
    
    def get_existing_tables(self):
        """
        Lista tabelas existentes no banco
        """
        try:
            tables = self.inspector.get_table_names(schema="empl")
            logger.info(f"üì¶ Tabelas existentes no schema 'empl': {len(tables)}")
            for table in tables:
                logger.info(f"   - {table}")
            return tables
        except Exception as e:
            logger.error(f"‚ùå Erro ao listar tabelas: {e}")
            return []
    
    def get_metadata_tables(self):
        """
        Lista tabelas definidas nos modelos
        """
        try:
            tables = list(self.metadata.tables.keys())
            logger.info(f"üìã Tabelas definidas nos modelos: {len(tables)}")
            for table in tables:
                logger.info(f"   - {table}")
            return tables
        except Exception as e:
            logger.error(f"‚ùå Erro ao listar metadados: {e}")
            return []
    
    def check_table_differences(self):
        """
        Verifica diferen√ßas entre banco e modelos
        """
        existing_tables = set(self.get_existing_tables())
        metadata_tables = set(self.get_metadata_tables())
        
        # Tabelas que existem no banco mas n√£o nos modelos
        orphaned_tables = existing_tables - metadata_tables
        
        # Tabelas que existem nos modelos mas n√£o no banco
        missing_tables = metadata_tables - existing_tables
        
        # Tabelas que existem em ambos
        common_tables = existing_tables & metadata_tables
        
        logger.info(f"üîç An√°lise de diferen√ßas:")
        logger.info(f"   - Tabelas √≥rf√£s (banco): {len(orphaned_tables)}")
        logger.info(f"   - Tabelas faltando (modelos): {len(missing_tables)}")
        logger.info(f"   - Tabelas comuns: {len(common_tables)}")
        
        return {
            "orphaned": orphaned_tables,
            "missing": missing_tables,
            "common": common_tables
        }
    
    def create_missing_tables(self):
        """
        Cria tabelas que est√£o faltando
        """
        try:
            logger.info("üöÄ Criando tabelas faltantes...")
            
            # Criar apenas tabelas que n√£o existem
            self.metadata.create_all(bind=self.engine, checkfirst=True)
            
            logger.info("‚úÖ Tabelas criadas/atualizadas com sucesso!")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao criar tabelas: {e}")
            return False
    
    def force_recreate_all_tables(self):
        """
        FOR√áA recria√ß√£o de todas as tabelas (CUIDADO!)
        """
        try:
            logger.warning("‚ö†Ô∏è ATEN√á√ÉO: Recriando TODAS as tabelas...")
            logger.warning("‚ö†Ô∏è ISSO PODE CAUSAR PERDA DE DADOS!")
            
            # Remover todas as tabelas
            self.metadata.drop_all(bind=self.engine)
            logger.info("üóëÔ∏è Tabelas removidas")
            
            # Recriar todas as tabelas
            self.metadata.create_all(bind=self.engine)
            logger.info("‚úÖ Tabelas recriadas com sucesso!")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao recriar tabelas: {e}")
            return False
    
    def safe_migrate(self):
        """
        Migra√ß√£o segura - apenas cria tabelas faltantes
        """
        try:
            logger.info("üîÑ Iniciando migra√ß√£o segura...")
            
            # Verificar conex√£o
            if not self.test_connection():
                return False
            
            # Analisar diferen√ßas
            differences = self.check_table_differences()
            
            # Se h√° tabelas faltando, criar
            if differences["missing"]:
                logger.info(f"üìù Criando {len(differences['missing'])} tabelas faltantes...")
                return self.create_missing_tables()
            else:
                logger.info("‚úÖ Nenhuma migra√ß√£o necess√°ria")
                return True
                
        except Exception as e:
            logger.error(f"‚ùå Erro na migra√ß√£o segura: {e}")
            return False
    
    def full_migrate(self):
        """
        Migra√ß√£o completa - recria todas as tabelas
        """
        try:
            logger.info("üîÑ Iniciando migra√ß√£o completa...")
            
            # Verificar conex√£o
            if not self.test_connection():
                return False
            
            # Recriar todas as tabelas
            return self.force_recreate_all_tables()
            
        except Exception as e:
            logger.error(f"‚ùå Erro na migra√ß√£o completa: {e}")
            return False
    
    def get_migration_status(self):
        """
        Retorna status atual da migra√ß√£o
        """
        try:
            differences = self.check_table_differences()
            
            return {
                "status": "ready" if not differences["missing"] else "needs_migration",
                "existing_tables": len(differences["common"]),
                "missing_tables": len(differences["missing"]),
                "orphaned_tables": len(differences["orphaned"]),
                "total_metadata_tables": len(self.metadata.tables),
                "connection": self.test_connection()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erro ao obter status: {e}")
            return {"status": "error", "error": str(e)}

# Inst√¢ncia global do migrador
migrator = AutoMigrator()

# Fun√ß√µes de conveni√™ncia
def auto_migrate():
    """
    Executa migra√ß√£o autom√°tica segura
    """
    return migrator.safe_migrate()

def force_migrate():
    """
    Executa migra√ß√£o completa (CUIDADO!)
    """
    return migrator.full_migrate()

def get_status():
    """
    Retorna status da migra√ß√£o
    """
    return migrator.get_migration_status()

def test_db():
    """
    Testa conex√£o com banco
    """
    return migrator.test_connection()
