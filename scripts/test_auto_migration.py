#!/usr/bin/env python3
"""
Script para testar o sistema de auto-migra√ß√£o
"""
import sys
import os

# Adicionar o diret√≥rio raiz ao path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from data.migrations import (
    auto_migrate, 
    force_migrate, 
    get_status, 
    test_db,
    migrator
)

def print_separator(title: str):
    """Imprime um separador visual"""
    print(f"\n{'='*60}")
    print(f"üß™ {title}")
    print(f"{'='*60}")

def print_success(message: str):
    """Imprime mensagem de sucesso"""
    print(f"‚úÖ {message}")

def print_error(message: str):
    """Imprime mensagem de erro"""
    print(f"‚ùå {message}")

def print_info(message: str):
    """Imprime mensagem informativa"""
    print(f"‚ÑπÔ∏è {message}")

def print_warning(message: str):
    """Imprime mensagem de aviso"""
    print(f"‚ö†Ô∏è {message}")

def test_connection():
    """Testa conex√£o com banco"""
    print_separator("TESTE DE CONEX√ÉO")
    
    try:
        success = test_db()
        if success:
            print_success("Conex√£o com banco estabelecida")
            return True
        else:
            print_error("Falha na conex√£o com banco")
            return False
    except Exception as e:
        print_error(f"Erro no teste de conex√£o: {e}")
        return False

def test_status():
    """Testa obten√ß√£o de status"""
    print_separator("STATUS DO BANCO")
    
    try:
        status = get_status()
        print_info(f"Status: {status['status']}")
        print_info(f"Tabelas existentes: {status['existing_tables']}")
        print_info(f"Tabelas faltando: {status['missing_tables']}")
        print_info(f"Tabelas √≥rf√£s: {status['orphaned_tables']}")
        print_info(f"Total de modelos: {status['total_metadata_tables']}")
        print_info(f"Conex√£o: {'OK' if status['connection'] else 'FALHA'}")
        
        return status
    except Exception as e:
        print_error(f"Erro ao obter status: {e}")
        return None

def test_safe_migration():
    """Testa migra√ß√£o segura"""
    print_separator("MIGRA√á√ÉO SEGURA")
    
    try:
        print_info("Executando migra√ß√£o segura...")
        success = auto_migrate()
        
        if success:
            print_success("Migra√ß√£o segura conclu√≠da")
        else:
            print_error("Falha na migra√ß√£o segura")
        
        return success
    except Exception as e:
        print_error(f"Erro na migra√ß√£o segura: {e}")
        return False

def test_force_migration():
    """Testa migra√ß√£o for√ßada (CUIDADO!)"""
    print_separator("MIGRA√á√ÉO FOR√áADA")
    
    print_warning("‚ö†Ô∏è ATEN√á√ÉO: Esta opera√ß√£o recriar√° TODAS as tabelas!")
    print_warning("‚ö†Ô∏è ISSO PODE CAUSAR PERDA DE DADOS!")
    
    response = input("ü§î Tem certeza? Digite 'SIM' para continuar: ")
    
    if response.upper() != "SIM":
        print_info("Opera√ß√£o cancelada pelo usu√°rio")
        return False
    
    try:
        print_info("Executando migra√ß√£o for√ßada...")
        success = force_migrate()
        
        if success:
            print_success("Migra√ß√£o for√ßada conclu√≠da")
        else:
            print_error("Falha na migra√ß√£o for√ßada")
        
        return success
    except Exception as e:
        print_error(f"Erro na migra√ß√£o for√ßada: {e}")
        return False

def test_table_analysis():
    """Testa an√°lise de tabelas"""
    print_separator("AN√ÅLISE DE TABELAS")
    
    try:
        # Tabelas existentes
        existing = migrator.get_existing_tables()
        print_info(f"Tabelas no banco: {len(existing)}")
        
        # Tabelas nos modelos
        metadata = migrator.get_metadata_tables()
        print_info(f"Tabelas nos modelos: {len(metadata)}")
        
        # Diferen√ßas
        differences = migrator.check_table_differences()
        print_info(f"Tabelas √≥rf√£s: {len(differences['orphaned'])}")
        print_info(f"Tabelas faltando: {len(differences['missing'])}")
        print_info(f"Tabelas comuns: {len(differences['common'])}")
        
        return True
    except Exception as e:
        print_error(f"Erro na an√°lise: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ EmployeeVirtual - Testador de Auto-Migra√ß√£o")
    print("=" * 60)
    
    # Teste de conex√£o
    if not test_connection():
        print_error("‚ùå N√£o √© poss√≠vel continuar sem conex√£o com banco")
        return
    
    # Status inicial
    initial_status = test_status()
    if not initial_status:
        print_error("‚ùå N√£o foi poss√≠vel obter status inicial")
        return
    
    # An√°lise de tabelas
    test_table_analysis()
    
    # Menu de op√ß√µes
    while True:
        print_separator("MENU DE OP√á√ïES")
        print("1. Ver status atual")
        print("2. Executar migra√ß√£o segura")
        print("3. Executar migra√ß√£o for√ßada (CUIDADO!)")
        print("4. Analisar tabelas")
        print("5. Sair")
        
        choice = input("\nü§î Escolha uma op√ß√£o (1-5): ")
        
        if choice == "1":
            test_status()
        elif choice == "2":
            test_safe_migration()
        elif choice == "3":
            test_force_migration()
        elif choice == "4":
            test_table_analysis()
        elif choice == "5":
            print_info("Saindo...")
            break
        else:
            print_error("Op√ß√£o inv√°lida!")
        
        # Pausa
        input("\n‚è∏Ô∏è Pressione ENTER para continuar...")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n\nüí• Erro inesperado: {e}")
